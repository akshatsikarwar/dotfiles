#!/bin/bash
set -e
SRC=$HOME/src
LRL=/opt/bb/var/cdb2/akdb/akdb.lrl

function build {
  DIR=$(mktemp -d)
  pushd $DIR
    cat > inputrc <<'EOF'
set editing-mode vi
set editing-mode vi
set keymap vi-command
Control-l: clear-screen
set keymap vi-insert
Control-l: clear-screen
EOF

    cat > bashrc <<'EOF'
PATH=$PATH:$HOME/bin:$HOME/src/build/db:$HOME/src/build/tools/cdb2sql:$HOME/src/build/tools/pmux:$HOME/src/build/tools/cdb2sockpool
PS1='[\u@\h \W]\$ '
alias go=". $HOME/bin/go"
EOF

    cat > gdbinit <<'EOF'
set print thread-events off
set height unlimited
set width unlimited
set print pretty on
set confirm off
define whereall
thread apply all where
end
define wa
thread apply all where
end
document whereall
Alias for 'thread apply all where'
end
document wa
Alias for 'thread apply all where'
end
EOF

  if [ -f /etc/redhat-release ]; then
  cat >> Dockerfile <<EOF
FROM fedora:latest
RUN dnf install -y          \
    figlet                  \
    gdb                     \
    iputils                 \
    libunwind               \
    nmap-ncat               \
    protobuf-c              \
    procps                  \
    sqlite                  \
    strace                  \
    telnet                  \
    tcputils                \
    valgrind                \
    vim
EOF
  else
  cat >> Dockerfile <<EOF
FROM ubuntu:disco
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get install -y \
bison \
build-essential \
cmake \
cmake-curses-gui \
flex \
gdb \
libevent-dev \
liblz4-dev \
libncurses5-dev \
libprotobuf-c-dev \
libprotobuf-c1 \
libreadline-dev \
libreadline8 \
libsqlite3-0 \
libsqlite3-dev \
libssl-dev \
libunwind-dev \
libunwind8 \
netcat-openbsd \
ninja-build \
openssl \
protobuf-c-compiler \
strace \
tcl \
tzdata \
uuid-dev \
valgrind \
vim \
zlib1g-dev
EOF
  fi
    cat >> Dockerfile <<EOF
COPY inputrc /root/.inputrc
COPY bashrc  /root/.bashrc
COPY gdbinit /root/.gdbinit
EOF
  docker build -t sikarwar:comdb2 .
  popd
  rm -rf $DIR
}

function run {
  n=$1
  [[ $n -eq 1 ]] && usage
  put clusternum $1
  for((i=1;i<=$n;++i)); do
    name=$(container-name $i)
    docker run -it -d --privileged --mount type=tmpfs,destination=/opt/bb --network comdb2 -v $HOME/bin:/root/bin -v $SRC:/root/src --name ${name} --hostname ${name} sikarwar:comdb2 /bin/cat
  done
  declare -a names
  for((i=1;i<$n;++i)); do
    names+=($(container-name $i))
  done
  cmd='s/^num=.*$/num='"$((n - 1))/"
  sed -i "$cmd" $HOME/bin/insert
  mkdir -p $HOME/src/bb/etc/cdb2/config.d
  cat > $HOME/src/bb/etc/cdb2/config.d/akdb.cfg <<EOF
akdb ${names[@]}
comdb2_config: default_type dev
EOF
  cat <<EOF > $HOME/src/bb/var/cdb2/akdb/akdb.lrl
name akdb
dir /opt/bb/var/cdb2/akdb
cluster nodes ${names[@]}"
setattr directio off
on parallel_count
EOF
}

function do_docker {
  declare -a names
  n=$(get clusternum)
  for ((i=1;i<=${n};++i)); do
    names+=($(container-name $i))
  done
  docker $1 ${names[@]}
}

function tmux {
  /usr/bin/tmux new-window
  /usr/bin/tmux send-keys "$HOME/bin/c 1" Enter
  n=$(get clusternum)
  n=$((n-1))
  for((i=2;i<=$n;++i)); do
    /usr/bin/tmux split-window
    /usr/bin/tmux send-keys "$HOME/bin/c ${i}" Enter
    /usr/bin/tmux select-layout tiled
  done
}

function gdb {
  tmux
  /usr/bin/tmux set-window-option synchronize-panes
  /usr/bin/tmux send-keys "gdb -q -ex run -args comdb2 akdb" Enter
  /usr/bin/tmux set-option window-status-style "bg=colour124"
  /usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

function vg {
  tmux
  /usr/bin/tmux set-window-option synchronize-panes
  /usr/bin/tmux send-keys "valgrind comdb2 akdb" Enter
  /usr/bin/tmux set-option window-status-style "bg=colour124"
  /usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

function usage {
  cat >&2 <<EOF
Usage: cluster <cmd> [arg]
cmd list:
  akdb  --------------- Start database
  build --------------- Build docker image
  client -------------- Client container
  copy  --------------- Setup /opt/bb
  ev [on|off] --------- Set, clear, check event_net
  gdb   --------------- Start database under gdb
  kill  --------------- Kill containers
  ps    --------------- List containers
  rm    --------------- Remove containers
  run <cluster-size> -- Initial run of containers
  start --------------- Start containers
  stop  --------------- Stop containers
  tmux  --------------- Container tmux panes
  vg    --------------- Start database under valgrind
EOF
  exit 1
}

function copy {
  cp -r $HOME/src/bb /opt
}

function client {
  n=$(get clusternum)
  c $n
}

function ev {
  have=$(egrep '^event_net ' $LRL | wc -l)
  if [[ "$1" == "on" ]] || [[ "$1" == "off" ]]; then
    if [[ $have -eq 1 ]]; then
      sed -i 's/^event_net .*$/event_net '"$1/" $LRL
    else
      echo event_net $1 >> $LRL
    fi
    have=1
  fi
  if [[ $have -eq 1 ]]; then
    figlet $(grep event_net $LRL | awk '{print $2}')
  else
    figlet missing
  fi
}

if [[ "$1" == "build" ]]; then
  build
elif [[ "$1" == "run" ]]; then
  run $(($2+1))
elif [[ "$1" == "rm" ]] || [[ "$1" == "stop" ]] || [[ "$1" == "kill" ]] || [[ "$1" == "start" ]]; then
  do_docker "$1"
elif [[ "$1" == "tmux" ]]; then
  tmux
elif [[ "$1" == "gdb" ]]; then
  gdb
elif [[ "$1" == "vg" ]]; then
  vg
elif [[ "$1" == "ps" ]]; then
  figlet $(get clusternum)
  docker ps -a
elif [[ "$1" == "client" ]] || [[ "$1" == "cl" ]]; then
  client
elif [[ "$1" == "copy" ]]; then
  copy
elif [[ "$1" == "ev" ]]; then
  ev "$2"
else
  usage
fi
