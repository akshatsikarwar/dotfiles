#!/bin/bash

function build {
	DIR=$(mktemp -d)
	pushd $DIR
	if [ -f /etc/redhat-release ]; then
		cat >> Dockerfile <<- EOF
			FROM fedora:latest
			RUN dnf install -y		\
				figlet			\
				gdb			\
				iputils			\
				libunwind		\
				nmap-ncat		\
				protobuf-c		\
				procps			\
				sqlite			\
				strace			\
				telnet			\
				tcputils		\
				valgrind		\
				vim
		EOF
	else
		cat >> Dockerfile <<- EOF
			FROM ubuntu:latest
			ENV DEBIAN_FRONTEND=noninteractive
			RUN apt-get update
			RUN apt-get install -y		\
				bc			\
				cmake			\
				figlet			\
				gawk			\
				gdb			\
				less			\
				libevent-2.1		\
				libevent-core-2.1	\
				libevent-openssl-2.1	\
				libevent-pthreads-2.1	\
				libprotobuf-c1		\
				libreadline7		\
				libsqlite3-0		\
				libunwind8		\
				liblz4-tool		\
				make			\
				netcat-openbsd		\
				openssh-client		\
				openssh-server		\
				openssl			\
				psmisc			\
				strace			\
				tzdata			\
				valgrind		\
				vim
		EOF
	fi
	cp $HOME/.vimrc vimrc
	cp $HOME/.inputrc inputrc
	cp $HOME/.gdbinit gdbinit
	cp $HOME/.bash_aliases bash_profile
	cat >> bash_profile <<- EOF
		export SKIPSSL=1
		export TESTDIR=/tmp/testdir
		export SKIP_COPY_EXE=1
		export SKIPDEBUG=1
	EOF
	ssh-keygen -q -t rsa -N '' -f $PWD/id_rsa
	cat > config <<- EOF
		LogLevel=quiet
		HOST c*
			StrictHostKeyChecking no
	EOF
	cat >> Dockerfile <<- EOF
		RUN mkdir -p /opt/bb/bin /opt/bb/etc/cdb2/config.d /opt/bb/include /opt/bb/lib/cdb2 /opt/bb/lib/pkgconfig /opt/bb/lib/systemd /opt/bb/lib/systemd/system /opt/bb/log/cdb2 /opt/bb/var/cdb2 /opt/bb/var/lib/cdb2 /opt/bb/var/log/cdb2
		RUN ln -s /root/src/build/db/comdb2			/opt/bb/bin/
		RUN ln -s /root/src/build/db/comdb2dumpcsc		/opt/bb/bin/
		RUN ln -s /root/src/build/db/copycomdb2			/opt/bb/bin/
		RUN ln -s /root/src/build/tools/pmux/pmux		/opt/bb/bin/
		RUN ln -s /root/src/build/tools/comdb2ar/comdb2ar	/opt/bb/bin/
		RUN ln -s /root/src/build/tools/cdb2sql/cdb2sql		/opt/bb/bin/
		RUN ln -s /opt/bb/bin/comdb2	/opt/bb/bin/cdb2_dump
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_printlog
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_stat
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_load
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_sqlreply
		RUN ln -s /opt/bb/bin/comdb2	/opt/bb/bin/cdb2_verify
		RUN mkdir /root/.ssh /var/run/sshd
		RUN touch		/root/.hushlogin
		COPY config		/root/.ssh/config
		COPY id_rsa		/root/.ssh/id_rsa
		COPY id_rsa.pub		/root/.ssh/id_rsa.pub
		COPY id_rsa.pub		/root/.ssh/authorized_keys
		COPY vimrc		/root/.vimrc
		COPY inputrc		/root/.inputrc
		COPY bash_profile	/root/.bash_profile
		COPY gdbinit		/root/.gdbinit
	EOF
	docker build -t sikarwar:comdb2 .
	popd
	rm -rf $DIR
}

function run {
	n=$1
	[[ $n -le 1 ]] && usage
	put clusternum $n
	declare -a names
	for ((i=0;i<=$n;++i)); do
		name=$(container-name $i)
		[[ $i -gt 0 ]] && names+=(${name})
		docker run -it -d --privileged --mount type=tmpfs,destination=/opt/bb:exec --network comdb2 \
		    -v $HOME/bin:/root/bin -v $HOME/.vim:/root/.vim -v $HOME/src:/root/src \
		    --name ${name} --hostname ${name} sikarwar:comdb2 /usr/sbin/sshd -D &
	done
	wait
	name=$(container-name 0)
	cluster_cmd='echo export CLUSTER=\"'"${names[@]}"'\" >> /root/.bash_profile'
	docker exec -it ${name} /bin/bash -c  "${cluster_cmd}"
	akdb_cfg=$(mktemp)
	cat > $akdb_cfg <<- EOF
		akdb ${names[@]}
		comdb2_config:default_type docker
		comdb2_config:allow_pmux_route:true
	EOF
	docker cp $akdb_cfg ${name}:/opt/bb/etc/cdb2/config.d/akdb.cfg
	rm $akdb_cfg
}

function do_docker {
	declare -a names
	n=$(get clusternum)
	for ((i=0;i<=${n};++i)); do
		names+=($(container-name $i))
	done
	docker $1 ${names[@]}
}

function tmux {
	/usr/bin/tmux new-window
	/usr/bin/tmux send-keys "printf '"'\033]2;%s\033\\'"' c1" Enter
	/usr/bin/tmux send-keys "$HOME/bin/c 1" Enter
	n=$(get clusternum)
	for ((i=2;i<=$n;++i)); do
		/usr/bin/tmux split-window
		/usr/bin/tmux send-keys "printf '"'\033]2;%s\033\\'"' c${i}" Enter
		/usr/bin/tmux send-keys "$HOME/bin/c ${i}" Enter
		/usr/bin/tmux select-layout tiled
	done
}

function akdb {
	tmux
	/usr/bin/tmux set-window-option synchronize-panes
	/usr/bin/tmux send-keys "comdb2 $1" Enter
	/usr/bin/tmux set-option window-status-style "bg=colour124"
	/usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

function pmux {
	tmux
	/usr/bin/tmux set-window-option synchronize-panes
	/usr/bin/tmux send-keys "pmux -f" Enter
	/usr/bin/tmux set-option window-status-style "bg=colour124"
	/usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

function create {
	set -e
	dir="/opt/bb/var/cdb2/$1"
	rm -rf  $dir
	comdb2 --create $1 --dir $dir --tunable 'sqlenginepool.maxt 50'
}

function copy {
	dir="/opt/bb/var/cdb2/$1"
	lrl="$dir/$1.lrl"
	cfg="/opt/bb/etc/cdb2/config.d/$1.cfg"
	echo "cluster nodes $CLUSTER" >> $lrl
	for c in $CLUSTER; do echo -n "$c "; ssh $c rm -rf $dir; scp $cfg $c: > /dev/null; copycomdb2 $lrl $c: & done
	wait
	echo ""
}

function cfg {
	cfg="/opt/bb/etc/cdb2/config.d/$1.cfg"
	cat > $cfg <<- EOF
		$1 ${CLUSTER}
		comdb2_config:default_type docker
		comdb2_config:allow_pmux_route:true
	EOF
}

function setup {
	cfg $1
	create $1
	copy $1
}

function gdb {
	tmux
	/usr/bin/tmux set-window-option synchronize-panes
	/usr/bin/tmux send-keys "gdb -q -ex run -args comdb2 $1" Enter
	/usr/bin/tmux set-option window-status-style "bg=colour124"
	/usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

function vg {
	tmux
	/usr/bin/tmux set-window-option synchronize-panes
	/usr/bin/tmux send-keys "valgrind comdb2 akdb" Enter
	/usr/bin/tmux set-option window-status-style "bg=colour124"
	/usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

function usage {
	cat >&2 <<- EOF
		Usage: cluster <cmd> [arg]

		cmd list:
		  db [dbname] ----------- Start database cluster-wide
		  build ----------------- Build docker image
		  clean ----------------- Kill and remove containers
		  copy [dbname] --------- Copy db cluster-wide
		  setup [dbname] -------- Create db and copy it cluster-wide
		  gdb [dbname] ---------- Start db under gdb cluster-wide
		  kill  ----------------- Kill containers
		  pmux  ----------------- Start pmux cluster-wide
		  ps    ----------------- List containers
		  rm    ----------------- Remove containers
		  run <cluster-size> ---- Initial run of containers
		  start ----------------- Start containers
		  stop  ----------------- Stop containers
		  tmux  ----------------- Container tmux panes
		  vg    ----------------- Start database under valgrind
	EOF
	exit 1
}

if [[ "$1" == "build" ]]; then
	build
elif [[ "$1" == "clean" ]]; then
	do_docker "kill" > /dev/null
	do_docker "rm"
elif [[ "$1" == "run" ]]; then
	run $2
elif [[ "$1" == "rm" ]] || [[ "$1" == "stop" ]] || [[ "$1" == "kill" ]] || [[ "$1" == "start" ]]; then
	do_docker "$1"
elif [[ "$1" == "tmux" ]]; then
	tmux
elif [[ "$1" == "db" ]]; then
	db ${2:-akdb}
elif [[ "$1" == "pmux" ]]; then
	pmux
elif [[ "$1" == "copy" ]]; then
	copy ${2:-akdb}
elif [[ "$1" == "setup" ]]; then
	setup ${2:-akdb}
elif [[ "$1" == "cfg" ]]; then
	cfg ${2:-akdb}
elif [[ "$1" == "gdb" ]]; then
	gdb ${2:-akdb}
elif [[ "$1" == "vg" ]]; then
	vg
elif [[ "$1" == "ps" ]]; then
	figlet $(get clusternum)
	docker ps -a
else
	usage
fi

# vim: set noet ts=8 sw=8:
