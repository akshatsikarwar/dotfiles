#!/usr/bin/env bash
source $HOME/.bash_profile 2>/dev/null

function wait_for_text {
	local TEXT=${1}
	local PANE=${2:-0}
	while :; do
		local capture=$(tmux capture-pane -t :${WINDOW}.${PANE} -p | grep "${TEXT}" | head -1)
		if [[ -n ${capture} ]]; then
			return
		fi
		sleep 1
	done
}

function container_name {
	echo c$1
	#echo "this_very_long_host_name_$1"
}

function c {
	local n=${1:-0}
	if [ -n $n ] && [ "$n" -eq "$n" ]; then
		local name=$(container_name $n)
		tmux send-keys "docker exec -it $name /usr/bin/env bash -l" Enter
		tmux send-keys "printf '"'\033]2;%s\033\\'"' $name" Enter
		tmux send-keys "clear; figlet -t $name" Enter
	fi
}

function build {
	DIR=$(mktemp -d)
	pushd $DIR
	cat >> Dockerfile <<- EOF
		FROM ubuntu:latest
		ENV DEBIAN_FRONTEND=noninteractive
		RUN apt-get update
		RUN apt-get install -y		\
			bc			\
			bison			\
			build-essential		\
			clang			\
			cmake			\
			figlet			\
			flex			\
			gawk			\
			gdb			\
			iputils-ping		\
			jq			\
			less			\
			libevent-dev		\
			liblz4-dev		\
			liblz4-tool		\
			libprotobuf-c-dev	\
			libreadline-dev		\
			libsqlite3-dev		\
			libssl-dev		\
			libunwind-dev		\
			liblua5.3-dev		\
			lua5.3			\
			make			\
			mariadb-client		\
			mariadb-server		\
			ncurses-dev		\
			netcat-openbsd		\
			ninja-build		\
			openssh-client		\
			openssh-server		\
			openssl			\
			protobuf-c-compiler	\
			psmisc			\
			strace			\
			tcl			\
			tzdata			\
			uuid-dev		\
			valgrind		\
			vim			\
			zlib1g-dev
	EOF
	cp $HOME/.inputrc inputrc
	cp $HOME/.gdbinit gdbinit
	cat <<-'EOF' > bash_profile
	export LANG=C
	export SKIPDEBUG=1
	export SKIPSSL=1
	export SKIP_COPY_EXE=1
	export TESTDIR=/opt/bb/tmp/testdir
	export http_proxy=http://devproxy.bloomberg.com:82
	export https_proxy=http://devproxy.bloomberg.com:82
	export no_proxy=bloomberg.com
	export PATH=$PATH:$HOME/bin:/opt/bb/bin

	bind -f $HOME/.inputrc
	alias c="$HOME/bin/cluster"
	alias g=". $HOME/bin/go"
	alias gdb="gdb -q"
	alias ls="ls -F"
	alias l="ls"
	alias ll="ls -l"
	alias lla="ls -la"
	alias ltr="ls -ltr"
	alias g=". $HOME/bin/go"
	alias vim="vim -p -X"
	alias ..='cd ..'
	alias ...='cd ../..'
	alias ....='cd ../../..'
	EOF
	ssh-keygen -q -t rsa -N '' -f $PWD/id_rsa
	cat > config <<- EOF
		LogLevel=quiet
		HOST *
			StrictHostKeyChecking no
	EOF
	cat > vimrc <<- EOF
		filetype on
		filetype plugin indent on
		syntax enable
		let mapleader = ","
		nnoremap <leader>4 :set ts=4 sw=4 et<cr>
		vnoremap <leader>5 :!$HOME/bin/format<cr>
		nnoremap <leader>8 :set ts=8 sw=8 noet<cr>
		vnoremap <leader>9 :!$HOME/bin/format-berk<cr>
		nnoremap <leader>g :lgrep! <cword><cr>:lopen<cr>
		nnoremap <bs> :tabp<cr>
		nnoremap <space> :tabn<cr>
		set backspace=indent,eol,start
		set cursorline
		set expandtab
		set grepprg=git\ grep\ -n
		set ignorecase
		set incsearch
		set laststatus=2
		set makeprg=vim-make
		set nobackup
		set nocompatible
		set noshowmatch
		set nowrap
		set number
		set relativenumber
		set sw=4
		set tabpagemax=32
		set ts=4
		set wildmenu
	EOF
	cat >> Dockerfile <<- EOF
		RUN mkdir -p /opt/bb/etc/cdb2/config.d /opt/bb/log/cdb2 /opt/bb/var/cdb2 /opt/bb/var/lib/cdb2 /opt/bb/var/log/cdb2
		RUN mkdir /root/.ssh /var/run/sshd
		RUN touch		/root/.hushlogin
		COPY config		/root/.ssh/config
		COPY id_rsa		/root/.ssh/id_rsa
		COPY id_rsa.pub		/root/.ssh/id_rsa.pub
		COPY id_rsa.pub		/root/.ssh/authorized_keys
		COPY inputrc		/root/.inputrc
		COPY bash_profile	/root/.bash_profile
		COPY gdbinit		/root/.gdbinit
		COPY vimrc		/root/.vimrc
	EOF
	docker build -t sikarwar:comdb2 .
	popd
	rm -rf $DIR
}

function run {
	n=$1
	[[ $n -lt 1 ]] && usage
	put clusternum $n
	declare -a names
	for ((i=0;i<=$n;++i)); do
		name=$(container_name $i)
		[[ $i -gt 0 ]] && names+=(${name})
		docker run --ulimit nofile=100000:100000 -it -d --privileged --mount type=tmpfs,destination=/opt/bb:exec \
			   --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --network comdb2  \
		           -v $HOME/bin:/root/bin \
			   -v $HOME/src:/root/src \
			   -v /opt/bb/bin:/opt/bb/bin \
			   -v /opt/bb/include:/opt/bb/include\
			   -v /opt/bb/lib:/opt/bb/lib \
		           --name ${name} --hostname ${name} sikarwar:comdb2 /usr/sbin/sshd -D &
	done
	wait
	for ((i=0;i<=$n;++i)); do
		name=$(container_name $i)
		cluster_cmd='echo export CLUSTER=\"'"${names[@]}"'\" >> /root/.bash_profile'
		docker exec -it ${name} /usr/bin/env bash -c "${cluster_cmd}"
	done
}

function do_docker {
	declare -a names
	n=$(get clusternum)
	for ((i=0;i<=${n};++i)); do
		names+=($(container_name $i))
	done
	docker $1 ${names[@]}
}

function tmux_int {
	first=${1:-1}
	if [[ -z ${TMUX_WINDOW_NAME} ]]; then
		tmux new-window
	else
		tmux new-window -n ${TMUX_WINDOW_NAME}
	fi
	WINDOW=$(tmux display-message -p '#I')
	c $first
	first=$(($first + 1))
	local n=$(get clusternum)
	for ((i=$first;i<=$n;++i)); do
		tmux split-window
		c $i
		tmux select-layout tiled
	done
	tmux set pane-border-status top
}

function sync_panes {
	tmux set-window-option synchronize-panes
	hipane on
}

function all {
	tmux_int 0
	sync_panes
}

function do_tmux {
	tmux_int
	sync_panes
}

function db {
	TMUX_WINDOW_NAME="$1"
	tmux_int
	sync_panes
	tmux send-keys "/opt/bb/bin/comdb2 $1" Enter
}

function pmux {
	TMUX_WINDOW_NAME="pmux"
	tmux_int
	sync_panes
	tmux send-keys "pmux -f" Enter
}

function create_with_legacy_tunables {
	local tunables=()

	##legacy
	tunables+=(--tunable "allow_negative_column_size")
	tunables+=(--tunable "berkattr elect_highest_committed_gen 0")
	tunables+=(--tunable "clean_exit_on_sigterm off")
	tunables+=(--tunable "create_default_user")
	tunables+=(--tunable "ddl_cascade_drop 0")
	tunables+=(--tunable "decoupled_logputs off")
	tunables+=(--tunable "disable_inplace_blob_optimization")
	tunables+=(--tunable "disable_inplace_blobs")
	tunables+=(--tunable "disable_osql_blob_optimization")
	tunables+=(--tunable "disable_tpsc_tblvers")
	tunables+=(--tunable "disallow write from beta if prod")
	tunables+=(--tunable "dont_forbid_ulonglong")
	tunables+=(--tunable "dont_init_with_inplace_updates")
	tunables+=(--tunable "dont_init_with_instant_schema_change")
	tunables+=(--tunable "dont_init_with_ondisk_header")
	tunables+=(--tunable "dont_prefix_foreign_keys")
	tunables+=(--tunable "dont_sort_nulls_with_header")
	tunables+=(--tunable "dont_superset_foreign_keys")
	tunables+=(--tunable "enable_sql_stmt_caching none")
	tunables+=(--tunable "enable_tagged_api")
	tunables+=(--tunable "init_with_time_based_genids")
	tunables+=(--tunable "legacy_schema on")
	tunables+=(--tunable "logmsg level info")
	tunables+=(--tunable "logmsg notimestamp")
	tunables+=(--tunable "logmsg skiplevel")
	tunables+=(--tunable "logput window 1")
	tunables+=(--tunable "mask_internal_tunables 0")
	tunables+=(--tunable "noblobstripe")
	tunables+=(--tunable "nochecksums")
	tunables+=(--tunable "nocrc32c")
	tunables+=(--tunable "nokeycompr")
	tunables+=(--tunable "no_null_blob_fix")
	tunables+=(--tunable "norcache")
	tunables+=(--tunable "no_static_tag_blob_fix")
	tunables+=(--tunable "nullfkey off")
	tunables+=(--tunable "nullsort high")
	tunables+=(--tunable "off fix_cstr")
	tunables+=(--tunable "off osql_odh_blob")
	tunables+=(--tunable "off return_long_column_names")
	tunables+=(--tunable "on accept_on_child_nets")
	tunables+=(--tunable "on disable_etc_services_lookup")
	tunables+=(--tunable "online_recovery off")
	tunables+=(--tunable "osql_send_startgen off")
	tunables+=(--tunable "setattr DIRECTIO 0")
	tunables+=(--tunable "setattr ENABLE_SEQNUM_GENERATIONS 0")
	tunables+=(--tunable "setattr MASTER_LEASE 0")
	tunables+=(--tunable "setattr NET_SEND_GBLCONTEXT 1")
	tunables+=(--tunable "setattr SC_DONE_SAME_TRAN 0")
	tunables+=(--tunable "sqlsortermaxmmapsize 268435456")
	tunables+=(--tunable "unnatural_types 1")
	tunables+=(--tunable "wal_osync 1")
	tunables+=(--tunable "init_with_queue_ondisk_header off")
	tunables+=(--tunable "init_with_queue_compr off")
	tunables+=(--tunable "init_with_queue_persistent_sequence off")
	tunables+=(--tunable "usenames")
	tunables+=(--tunable "setattr max_sql_idle_time 864000")
	tunables+=(--tunable "utxnid_log off")
	tunables+=(--tunable "commit_lsn_map off")

	#initcomdb2
	tunables+=(--tunable "dtastripe 8")
	tunables+=(--tunable "blobstripe")
	tunables+=(--tunable "nullsort low")
	tunables+=(--tunable "checksums")
	tunables+=(--tunable "singlemeta")
	tunables+=(--tunable "sort_nulls_with_header")
	tunables+=(--tunable "sql_tranlevel_default block")
	tunables+=(--tunable "sql_tranlevel_default blocksock")
	tunables+=(--tunable "sql_tranlevel_default prefer_blocksock")
	tunables+=(--tunable "on fix_cstr")
	tunables+=(--tunable "use_llmeta")
	tunables+=(--tunable "enable_good_sql_return_codes")
	tunables+=(--tunable "null_blob_fix")
	tunables+=(--tunable "static_tag_blob_fix")
	tunables+=(--tunable "forbid_ulonglong")
	tunables+=(--tunable "init_with_ondisk_header")
	tunables+=(--tunable "init_with_instant_schema_change")
	tunables+=(--tunable "init_with_inplace_updates")
	tunables+=(--tunable "nonames")
	tunables+=(--tunable "setattr DEADLOCK_WRITERS_WITH_LEAST_WRITES 1")
	tunables+=(--tunable "prefix_foreign_keys")
	tunables+=(--tunable "superset_foreign_keys")
	tunables+=(--tunable "enable_inplace_blobs")
	tunables+=(--tunable "enable_inplace_blob_optimization")
	tunables+=(--tunable "enable_osql_blob_optimization")
	tunables+=(--tunable "nullfkey")
	tunables+=(--tunable "disable_tagged_api")

	#comdb2.lrl
	tunables+=(--tunable "allow write from beta if prod")
	tunables+=(--tunable "use_live_schema_change")
	tunables+=(--tunable "use_parallel_schema_change")
	tunables+=(--tunable "sql_thread_pool 96")
	tunables+=(--tunable "maxq 400")
	tunables+=(--tunable "reqldiffstat 60")
	tunables+=(--tunable "maxosqltransfer 10000")
	tunables+=(--tunable "net_max_queue 25000")
	tunables+=(--tunable "osql_max_queue 25000")
	tunables+=(--tunable "setattr PANICFULLDIAG 0")
	tunables+=(--tunable "mallocregions")
	tunables+=(--tunable "setattr REPTIMEOUT_MINMS 10000")
	tunables+=(--tunable "update_delete_limit")
	tunables+=(--tunable "env MALLOC_ARENA_MAX 4")
	tunables+=(--tunable "off check_sparse_files")
	tunables+=(--tunable "enable_datetime_truncation")
	tunables+=(--tunable "enable_datetime_promotion")
	tunables+=(--tunable "enable_datetime_ms_us_sc")
	tunables+=(--tunable "berkattr num_write_retries 100")
	tunables+=(--tunable "setattr DISABLE_SELECTVONLY_TRAN_NOP 1")
	tunables+=(--tunable "setattr APPSOCKSLIMIT 1350")
	tunables+=(--tunable "setattr MAXAPPSOCKSLIMIT 1800")
	tunables+=(--tunable "setattr MAXSOCKCACHED 1800")
	tunables+=(--tunable "on sc_logical_txn")
	tunables+=(--tunable "ctrace_nlogs 15")
	tunables+=(--tunable "ctrace_rollat 10485760")
	tunables+=(--tunable "setattr LOGREGIONSZ 2097152")
	tunables+=(--tunable "setattr SLOWREP_INCOHERENT_MINTIME 100")
	tunables+=(--tunable "setattr SLOWREP_INCOHERENT_FACTOR 2")
	tunables+=(--tunable "setattr private_blkseq_enabled 1")
	tunables+=(--tunable "on private_blkseq")
	tunables+=(--tunable "off sqlite3openserial")
	tunables+=(--tunable "driver_ulimit 8589934592")
	tunables+=(--tunable "setattr DISABLE_SERVER_SOCKPOOL 0")
	tunables+=(--tunable "setattr NOMASTER_ALERT_SECONDS 100")
	tunables+=(--tunable "env SWAPIN_DEFAULT_LRUSIZE 2048")
	tunables+=(--tunable "setattr SOSQL_MAX_COMMIT_WAIT_SEC 180")
	tunables+=(--tunable "setattr MIN_KEEP_LOGS_AGE 600")
	tunables+=(--tunable "on json_escape_control_characters")
	tunables+=(--tunable "noenv_messages on")
	tunables+=(--tunable "legacy_schema off")
	tunables+=(--tunable "norcache")
	tunables+=(--tunable "certsign 1")
	tunables+=(--tunable "setattr max_sql_idle_time 864000")
	tunables+=(--tunable "net_poll 1000")
	tunables+=(--tunable "master_sends_query_effects 1")
	tunables+=(--tunable "dont_block_delete_files_thread 1")
	tunables+=(--tunable "max_cascaded_rows_per_txn 50000")


	#comdb2_local.lrl
	tunables+=(--tunable "use_live_schema_change")
	tunables+=(--tunable "nice 5")
	tunables+=(--tunable "use_planned_schema_change")
	tunables+=(--tunable "on fix_cstr")
	tunables+=(--tunable "enable_block_offload")
	tunables+=(--tunable "override_cachekb 65536")
	tunables+=(--tunable "cachekbmin 65536")
	tunables+=(--tunable "allow write from dev")
	tunables+=(--tunable "blocksql_over_sockets")
	tunables+=(--tunable "net_lmt_upd_incoherent_nodes 70")
	tunables+=(--tunable "setattr REPMETHODMAXSLEEP 300")
	tunables+=(--tunable "setattr MIN_KEEP_LOGS 5")
	tunables+=(--tunable "ulimit_stacksize 2097152")
	tunables+=(--tunable "enable_sock_fstsnd")
	tunables+=(--tunable "disable_overflow_page_trace")
	tunables+=(--tunable "commitdelaymax 8")
	tunables+=(--tunable "setattr NUMTIMESBEHIND 1000000000")
	tunables+=(--tunable "setattr REP_PROCESSORS 0")
	tunables+=(--tunable "setattr REP_WORKERS 0")
	tunables+=(--tunable "on parallel_sync")
	tunables+=(--tunable "iopool maxt 4")
	tunables+=(--tunable "setattr TRACK_REPLICATION_TIMES 1")
	tunables+=(--tunable "setattr TOOMANYSKIPPED 20")
	tunables+=(--tunable "setattr WARN_SLOW_REPLICANTS 1")
	tunables+=(--tunable "setattr MAKE_SLOW_REPLICANTS_INCOHERENT 1")
	tunables+=(--tunable "enable_dumpmgr")
	tunables+=(--tunable "directio")
	tunables+=(--tunable "enable_sparse_lockerid_map")
	tunables+=(--tunable "analyze_tbl_threads 2")
	tunables+=(--tunable "analyze_comp_threads 4")
	tunables+=(--tunable "disable_selectv_range_check")
	tunables+=(--tunable "cohlease")
	tunables+=(--tunable "setattr CATCHUP_WINDOW 0")
	tunables+=(--tunable "ignore_coherency_fstsnds")
	tunables+=(--tunable "crc32c")
	tunables+=(--tunable "keycompr")
	tunables+=(--tunable "init_with_ondisk_header")
	tunables+=(--tunable "init_with_inplace_updates")
	tunables+=(--tunable "init_with_instant_schema_change")
	tunables+=(--tunable "init_with_compr crle")
	tunables+=(--tunable "init_with_compr_blobs lz4")
	tunables+=(--tunable "maxwt 8")
	tunables+=(--tunable "setattr TABLESCAN_CACHE_UTILIZATION 30")
	tunables+=(--tunable "enable_bulk_import")
	tunables+=(--tunable "enable_bulk_import_different_tables")
	tunables+=(--tunable "maxblockops 25000")
	tunables+=(--tunable "maxosqltransfer 50000")
	tunables+=(--tunable "setattr DEADLOCK_WRITERS_WITH_LEAST_WRITES 1")
	tunables+=(--tunable "on berkdb_iomap")
	tunables+=(--tunable "maxq 400")
	tunables+=(--tunable "iopool longwait 30000")
	tunables+=(--tunable "setattr UDP_DROP_WARN_PERCENT 50")
	tunables+=(--tunable "ufid_log on")
	tunables+=(--tunable "ufid_remove_dbp 1")
	tunables+=(--tunable "ufid_add_on_collect 1")
	tunables+=(--tunable "net_max_queue 50000")
	tunables+=(--tunable "setattr MEMPTRICKLEPERCENT 90")
	tunables+=(--tunable "memstat_autoreport_freq 0")
	tunables+=(--tunable "setattr SC_DONE_SAME_TRAN 1")
	tunables+=(--tunable "old_column_names 0")
	tunables+=(--tunable "rep_skip_recovery on")

	/opt/bb/bin/comdb2 --create $1 --dir $dir "${tunables[@]}"
}

function create_modern {
	local tunables=()
	/opt/bb/bin/comdb2 --create $1 --dir $dir "${tunables[@]}"
}
function create {
	set -e
	dir="/opt/bb/var/cdb2/$1"
	rm -rf  $dir

	#create_modern "$*"
	create_with_legacy_tunables "$*"
}

function copy {
	local isdocker
	isdocker=$(cat /proc/self/cgroup | cut -d/ -f2 | head -1)
	if [[ "$isdocker" != "docker" ]]; then
		docker exec $(container_name 0) /root/bin/cluster copy $1
		return $?
	fi
	dir="/opt/bb/var/cdb2/$1"
	lrl="$dir/$1.lrl"
	cfg="/opt/bb/etc/cdb2/config.d/$1.cfg"
	echo "cluster nodes $CLUSTER" >> $lrl
	echo "logmsg.level info" >> $lrl
	for c in $CLUSTER; do echo -n "$c "; ssh $c rm -rf $dir; scp $cfg $c: > /dev/null; copycomdb2 $lrl $c: & done
	wait
	echo ""
}

function cfg {
	cfg="/opt/bb/etc/cdb2/config.d/$1.cfg"
	cat > $cfg <<- EOF
		$1 ${CLUSTER}
		comdb2_config:default_type docker
		comdb2_config:allow_pmux_route:true
	EOF
}

function setup {
	local isdocker
	isdocker=$(cat /proc/self/cgroup | cut -d/ -f2 | head -1)
	if [[ "$isdocker" != "docker" ]]; then
		docker exec $(container_name 0) /root/bin/cluster setup $1
		return $?
	fi
	cfg $1
	create $1
	copy $1
}

function gdb {
	TMUX_WINDOW_NAME="gdb:$1"
	tmux_int
	sync_panes
	tmux send-keys "gdb -q -ex run -args /opt/bb/bin/comdb2 $1" Enter
}

function vg {
	TMUX_WINDOW_NAME="valgrind:$1"
	tmux_int
	sync_panes
	tmux send-keys "valgrind /opt/bb/bin/comdb2 akdb" Enter
}

function usage {
	cat >&2 <<- EOF
		Usage: cluster <cmd> [arg]

		cmd list:
		  all ------------------- Pane on all containers
		  build ----------------- Build docker image
		  clean ----------------- Kill and remove containers
		  c <num> --------------- Connect to numbered container
		  clnt ------------------ Connect to the container #0
		  copy [dbname] --------- Copy db cluster-wide
		  db [dbname] ----------- Start database cluster-wide
		  gdb [dbname] ---------- Start db under gdb cluster-wide
		  help ------------------ This message
		  kill ------------------ Kill containers
		  pmux ------------------ Start pmux cluster-wide
		  ps -------------------- List containers
		  rm -------------------- Remove containers
		  run <cluster-size> ---- Initial run of containers
		  setup [dbname] -------- Create db and copy it cluster-wide
		  start ----------------- Start containers
		  stop ------------------ Stop containers
		  tmux ------------------ Container tmux panes
		  vg -------------------- Start database under valgrind
	EOF
	exit 1
}

function mysql_start {
	tmux new-window
	WINDOW=$(tmux display-message -p '#I')
	local DATADIR=/opt/bb/var/cdb2/mysql
	local SOCKET=/tmp/mysql.socket
	local MYSQL="mysqld --no-defaults --datadir=${DATADIR} --socket=${SOCKET} --wsrep_on=on --wsrep-provider=/usr/lib/libgalera_smm.so --binlog-format=ROW --skip-grant-tables --innodb-autoinc-lock-mode=2 --wsrep-cluster-address=gcomm://"
	local CREATE_DIR="rm -rf ${DATADIR} ${SOCKET} && mkdir ${DATADIR} && chown mysql:mysql ${DATADIR}"
	local MYSQL_USER="su -s /bin/bash mysql"
	c 1
	tmux send-keys "${CREATE_DIR}" Enter
	tmux send-keys "${MYSQL_USER}" Enter
	tmux send-keys "mysql_install_db" Enter
	tmux send-keys "${MYSQL}" Enter
	wait_for_text 'Synchronized with group, ready for connections'
	declare -a names
	local n=$(get clusternum)
	for ((i=1;i<=${n};++i)); do
		names+=($(container_name $i))
	done
	local CLUSTER=$(tr ' ' ',' <<< ${names[@]})
	for ((i=2;i<=$n;++i)); do
		tmux split-window
		c $i
		tmux send-keys "${CREATE_DIR}" Enter
		tmux send-keys "${MYSQL_USER}" Enter
		tmux send-keys "${MYSQL}${CLUSTER}" Enter
		tmux select-layout tiled
	done
}

function do_mysql {
	if [[ "$1" == "start" ]]; then
		mysql_start
		exit
	fi
}

if [[ -z $1 ]] || [[ $(( $1 * 10 )) == "${1}0" ]]; then
	arg1="c"
	arg2="$1"
elif [[ $1 == "t" ]]; then
	arg1="tmux"
else
	arg1="$1"
	arg2="$2"
fi

if [[ "$arg1" == "all" ]]; then
	all
elif [[ "$arg1" == "build" ]]; then
	build
elif [[ "$arg1" == "clean" ]]; then
	do_docker "kill" > /dev/null
	do_docker "rm"
elif [[ "$arg1" == "c" ]]; then
	c $arg2
elif [[ "$arg1" == "run" ]] || [[ $arg1 == 'r' ]]; then
	run $arg2
elif [[ "$arg1" == "rm" ]] || [[ "$arg1" == "stop" ]] || [[ "$arg1" == "kill" ]] || [[ "$arg1" == "start" ]]; then
	do_docker "$arg1"
elif [[ "$arg1" == "tmux" ]]; then
	do_tmux
elif [[ "$arg1" == "db" ]]; then
	db ${2:-akdb}
elif [[ "$arg1" == "pmux" ]]; then
	pmux
elif [[ "$arg1" == "copy" ]]; then
	copy ${2:-akdb}
elif [[ "$arg1" == "setup" ]]; then
	setup ${2:-akdb}
elif [[ "$arg1" == "cfg" ]]; then
	cfg ${2:-akdb}
elif [[ "$arg1" == "gdb" ]]; then
	gdb ${2:-akdb}
elif [[ "$arg1" == "vg" ]]; then
	vg
elif [[ "$arg1" == "ps" ]]; then
	figlet -t $(get clusternum)
	docker ps -a
elif [[ "$arg1" == "mysql" ]]; then
	shift
	do_mysql $*
elif [[ "$arg1" == "help" ]]; then
	usage
fi

# vim: set noet ts=8 sw=8:
