#!/bin/bash

source $HOME/.bash_profile 2>/dev/null

function wait_for_text {
	local TEXT=${1}
	local PANE=${2:-0}
	while :; do
		local capture=$(tmux capture-pane -t :${WINDOW}.${PANE} -p | grep "${TEXT}" | head -1)
		if [[ -n ${capture} ]]; then
			return
		fi
		sleep 1
	done
}

function container_name {
	echo c$1
	#if [[ $(($1 % 2)) == 0 ]]; then
	#    echo "thisverylongname$1"
	#else
	#    echo "c$1"
	#fi
}

function c {
	local n=${1:-0}
	if [ -n $n ] && [ "$n" -eq "$n" ]; then
		local name=$(container_name $n)
		/usr/bin/tmux send-keys "docker exec -it $name /bin/bash -l" Enter
		/usr/bin/tmux send-keys "printf '"'\033]2;%s\033\\'"' $name" Enter
		/usr/bin/tmux send-keys "clear; figlet $name" Enter
	fi
}

function build {
	DIR=$(mktemp -d)
	pushd $DIR
	cat >> Dockerfile <<- EOF
		FROM ubuntu:latest
		ENV DEBIAN_FRONTEND=noninteractive
		RUN apt-get update
		RUN apt-get install -y		\
			bc			\
			bison			\
			build-essential		\
			clang			\
			cmake			\
			figlet			\
			flex			\
			gawk			\
			gdb			\
			iputils-ping		\
			jq			\
			less			\
			libevent-dev		\
			liblz4-dev		\
			liblz4-tool		\
			libprotobuf-c-dev	\
			libreadline-dev		\
			libsqlite3-dev		\
			libssl-dev		\
			libunwind-dev		\
			make			\
			mariadb-client		\
			mariadb-server		\
			ncurses-dev		\
			netcat-openbsd		\
			ninja-build		\
			openssh-client		\
			openssh-server		\
			openssl			\
			protobuf-c-compiler	\
			psmisc			\
			strace			\
			tcl			\
			tzdata			\
			uuid-dev		\
			valgrind		\
			vim			\
			zlib1g-dev
	EOF
	cp $HOME/.vimrc vimrc
	cp $HOME/.inputrc inputrc
	cp $HOME/.gdbinit gdbinit
	cat > bash_profile <<- EOF
		[[ -n \$CLUSTER ]] && return
		export SKIPSSL=1
		export TESTDIR=/tmp/testdir
		export SKIP_COPY_EXE=1
		export SKIPDEBUG=1
	EOF
	cat $HOME/.bash_aliases >> bash_profile
	ssh-keygen -q -t rsa -N '' -f $PWD/id_rsa
	cat > config <<- EOF
		LogLevel=quiet
		HOST c*
			StrictHostKeyChecking no
	EOF
	cat >> Dockerfile <<- EOF
		RUN mkdir -p /opt/bb/bin /opt/bb/etc/cdb2/config.d /opt/bb/include /opt/bb/lib/cdb2 /opt/bb/lib/pkgconfig /opt/bb/lib/systemd /opt/bb/lib/systemd/system /opt/bb/log/cdb2 /opt/bb/var/cdb2 /opt/bb/var/lib/cdb2 /opt/bb/var/log/cdb2
		RUN ln -s /root/src/comdb2/build/db/comdb2			/opt/bb/bin/
		RUN ln -s /root/src/comdb2/build/db/comdb2dumpcsc		/opt/bb/bin/
		RUN ln -s /root/src/comdb2/build/db/copycomdb2			/opt/bb/bin/
		RUN ln -s /root/src/comdb2/build/tools/pmux/pmux		/opt/bb/bin/
		RUN ln -s /root/src/comdb2/build/tools/comdb2ar/comdb2ar	/opt/bb/bin/
		RUN ln -s /root/src/comdb2/build/tools/cdb2sql/cdb2sql		/opt/bb/bin/
		RUN ln -s /opt/bb/bin/comdb2	/opt/bb/bin/cdb2_dump
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_printlog
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_stat
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_load
		RUN ln -s /opt/bb/bin/comdb2 	/opt/bb/bin/cdb2_sqlreply
		RUN ln -s /opt/bb/bin/comdb2	/opt/bb/bin/cdb2_verify
		RUN mkdir /root/.ssh /var/run/sshd
		RUN touch		/root/.hushlogin
		COPY config		/root/.ssh/config
		COPY id_rsa		/root/.ssh/id_rsa
		COPY id_rsa.pub		/root/.ssh/id_rsa.pub
		COPY id_rsa.pub		/root/.ssh/authorized_keys
		COPY vimrc		/root/.vimrc
		COPY inputrc		/root/.inputrc
		COPY bash_profile	/root/.bash_profile
		COPY gdbinit		/root/.gdbinit
	EOF
	docker build -t sikarwar:comdb2 .
	popd
	rm -rf $DIR
}

function run {
	n=$1
	[[ $n -lt 1 ]] && usage
	put clusternum $n
	declare -a names
	for ((i=0;i<=$n;++i)); do
		name=$(container_name $i)
		[[ $i -gt 0 ]] && names+=(${name})
		docker run -it -d --privileged --mount type=tmpfs,destination=/opt/bb:exec --network comdb2 \
		    -v $HOME/bin:/root/bin -v $HOME/.vim:/root/.vim -v $HOME/src:/root/src \
		    --name ${name} --hostname ${name} sikarwar:comdb2 /usr/sbin/sshd -D &
	done
	wait
	for ((i=0;i<=$n;++i)); do
		name=$(container_name $i)
		cluster_cmd='echo export CLUSTER=\"'"${names[@]}"'\" >> /root/.bash_profile'
		docker exec -it ${name} /bin/bash -c "${cluster_cmd}"
	done
}

function do_docker {
	declare -a names
	n=$(get clusternum)
	for ((i=0;i<=${n};++i)); do
		names+=($(container_name $i))
	done
	docker $1 ${names[@]}
}

function tmux_int {
	first=${1:-1}
	if [[ -z ${TMUX_WINDOW_NAME} ]]; then
		/usr/bin/tmux new-window
	else
		/usr/bin/tmux new-window -n ${TMUX_WINDOW_NAME}
	fi
	WINDOW=$(tmux display-message -p '#I')
	c $first
	first=$(($first + 1))
	local n=$(get clusternum)
	for ((i=$first;i<=$n;++i)); do
		/usr/bin/tmux split-window
		c $i
		/usr/bin/tmux select-layout tiled
	done
}

function sync_panes {
	/usr/bin/tmux set-window-option synchronize-panes
	/usr/bin/tmux set-option window-status-style "bg=colour124"
	/usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

function all {
	tmux_int 0
	sync_panes
}

function do_tmux {
	tmux_int
	sync_panes
}

function db {
	TMUX_WINDOW_NAME="$1"
	tmux_int
	sync_panes
	/usr/bin/tmux send-keys "/opt/bb/bin/comdb2 $1" Enter
}

function pmux {
	TMUX_WINDOW_NAME="pmux"
	tmux_int
	sync_panes
	/usr/bin/tmux send-keys "pmux -f" Enter
}

function create {
	set -e
	dir="/opt/bb/var/cdb2/$1"
	rm -rf  $dir
	/opt/bb/bin/comdb2 --create $1 --dir $dir
}

function copy {
	local isdocker
	isdocker=$(cat /proc/self/cgroup | cut -d/ -f2 | head -1)
	if [[ "$isdocker" != "docker" ]]; then
		docker exec $(container_name 0) /root/bin/cluster copy $1
		return $?
	fi
	dir="/opt/bb/var/cdb2/$1"
	lrl="$dir/$1.lrl"
	cfg="/opt/bb/etc/cdb2/config.d/$1.cfg"
	echo "cluster nodes $CLUSTER" >> $lrl
	for c in $CLUSTER; do echo -n "$c "; ssh $c rm -rf $dir; scp $cfg $c: > /dev/null; copycomdb2 $lrl $c: & done
	wait
	echo ""
}

function cfg {
	cfg="/opt/bb/etc/cdb2/config.d/$1.cfg"
	cat > $cfg <<- EOF
		$1 ${CLUSTER}
		comdb2_config:default_type docker
		comdb2_config:allow_pmux_route:true
	EOF
}

function setup {
	local isdocker
	isdocker=$(cat /proc/self/cgroup | cut -d/ -f2 | head -1)
	if [[ "$isdocker" != "docker" ]]; then
		docker exec $(container_name 0) /root/bin/cluster setup $1
		return $?
	fi
	cfg $1
	create $1
	copy $1
}

function gdb {
	TMUX_WINDOW_NAME="gdb:$1"
	tmux_int
	sync_panes
	/usr/bin/tmux send-keys "gdb -q -ex run -args /opt/bb/bin/comdb2 $1" Enter
}

function vg {
	TMUX_WINDOW_NAME="valgrind:$1"
	tmux_int
	sync_panes
	/usr/bin/tmux send-keys "valgrind /opt/bb/bin/comdb2 akdb" Enter
}

function usage {
	cat >&2 <<- EOF
		Usage: cluster <cmd> [arg]

		cmd list:
		  all ------------------- Pane on all containers
		  build ----------------- Build docker image
		  clean ----------------- Kill and remove containers
		  c <num> --------------- Connect to numbered container
		  clnt ------------------ Connect to the container #0
		  copy [dbname] --------- Copy db cluster-wide
		  db [dbname] ----------- Start database cluster-wide
		  gdb [dbname] ---------- Start db under gdb cluster-wide
		  kill ------------------ Kill containers
		  pmux ------------------ Start pmux cluster-wide
		  ps -------------------- List containers
		  rm -------------------- Remove containers
		  run <cluster-size> ---- Initial run of containers
		  setup [dbname] -------- Create db and copy it cluster-wide
		  start ----------------- Start containers
		  stop ------------------ Stop containers
		  tmux ------------------ Container tmux panes
		  vg -------------------- Start database under valgrind
	EOF
	exit 1
}

function mysql_start {
	/usr/bin/tmux new-window
	WINDOW=$(/usr/bin/tmux display-message -p '#I')
	local DATADIR=/opt/bb/var/cdb2/mysql
	local SOCKET=/tmp/mysql.socket
	local MYSQL="mysqld --no-defaults --datadir=${DATADIR} --socket=${SOCKET} --wsrep_on=on --wsrep-provider=/usr/lib/libgalera_smm.so --binlog-format=ROW --skip-grant-tables --innodb-autoinc-lock-mode=2 --wsrep-cluster-address=gcomm://"
	local CREATE_DIR="rm -rf ${DATADIR} ${SOCKET} && mkdir ${DATADIR} && chown mysql:mysql ${DATADIR}"
	c 1
	/usr/bin/tmux send-keys "${CREATE_DIR}" Enter
	/usr/bin/tmux send-keys "su -s /bin/bash mysql" Enter
	/usr/bin/tmux send-keys "mysql_install_db" Enter
	/usr/bin/tmux send-keys "${MYSQL}" Enter
	wait_for_text 'Synchronized with group, ready for connections'
	declare -a names
	local n=$(get clusternum)
	for ((i=1;i<=${n};++i)); do
		names+=($(container_name $i))
	done
	local CLUSTER=$(tr ' ' ',' <<< ${names[@]})
	for ((i=2;i<=$n;++i)); do
		/usr/bin/tmux split-window
		c $i
		/usr/bin/tmux send-keys "${CREATE_DIR}" Enter
		/usr/bin/tmux send-keys "su -s /bin/bash mysql" Enter
		/usr/bin/tmux send-keys "${MYSQL}${CLUSTER}" Enter
		/usr/bin/tmux select-layout tiled
	done
}

function do_mysql {
	if [[ "$1" == "start" ]]; then
		mysql_start
		exit
	fi
}

if [[ "$1" == "all" ]]; then
	all
elif [[ "$1" == "build" ]]; then
	build
elif [[ "$1" == "clean" ]]; then
	do_docker "kill" > /dev/null
	do_docker "rm"
elif [[ "$1" == "c" ]]; then
	c $2
elif [[ "$1" == "clnt" ]]; then
	c 0
elif [[ "$1" == "run" ]]; then
	run $2
elif [[ "$1" == "rm" ]] || [[ "$1" == "stop" ]] || [[ "$1" == "kill" ]] || [[ "$1" == "start" ]]; then
	do_docker "$1"
elif [[ "$1" == "tmux" ]]; then
	do_tmux
elif [[ "$1" == "db" ]]; then
	db ${2:-akdb}
elif [[ "$1" == "pmux" ]]; then
	pmux
elif [[ "$1" == "copy" ]]; then
	copy ${2:-akdb}
elif [[ "$1" == "setup" ]]; then
	setup ${2:-akdb}
elif [[ "$1" == "cfg" ]]; then
	cfg ${2:-akdb}
elif [[ "$1" == "gdb" ]]; then
	gdb ${2:-akdb}
elif [[ "$1" == "vg" ]]; then
	vg
elif [[ "$1" == "ps" ]]; then
	figlet $(get clusternum)
	docker ps -a
elif [[ "$1" == "mysql" ]]; then
	shift
	do_mysql $*
else
	usage
fi

# vim: set noet ts=8 sw=8:
