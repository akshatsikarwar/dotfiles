#!/bin/bash
set -e
SRC=$HOME/src
function build {
  DIR=$(mktemp -d)
  pushd $DIR
  cat > Dockerfile <<EOF
FROM ubuntu:disco
RUN apt update
RUN apt install -y          \
    gdb                     \
    libevent-2.1            \
    libevent-pthreads-2.1   \
    libprotobuf-c1          \
    libreadline8            \
    libsqlite3-0            \
    libunwind8              \
    netcat-openbsd          \
    openssl                 \
    tzdata                  \
    vim
RUN echo "set editing-mode vi"                  >> /root/.inputrc
RUN echo "set editing-mode vi"                  >> /root/.inputrc
RUN echo "set keymap vi-command"                >> /root/.inputrc
RUN echo "Control-l: clear-screen"              >> /root/.inputrc
RUN echo "set keymap vi-insert"                 >> /root/.inputrc
RUN echo "Control-l: clear-screen"              >> /root/.inputrc
RUN echo "PATH=\\\$PATH:$HOME/bin"                >> /root/.bashrc
RUN echo "PATH=\\\$PATH:$SRC/build/db"            >> /root/.bashrc
RUN echo "PATH=\\\$PATH:$SRC/build/tools/cdb2sql" >> /root/.bashrc
RUN echo "PATH=\\\$PATH:$SRC/build/tools/pmux"    >> /root/.bashrc
RUN echo "set print thread-events off"          >> /root/.gdbinit
RUN echo "set height 0"                         >> /root/.gdbinit
RUN echo "set pagination off"                   >> /root/.gdbinit
RUN echo "set print pretty on"                  >> /root/.gdbinit
RUN echo "set confirm off"                      >> /root/.gdbinit
RUN echo "define whereall"                      >> /root/.gdbinit
RUN echo "thread apply all where"               >> /root/.gdbinit
RUN echo "end"                                  >> /root/.gdbinit
RUN echo "define wa"                            >> /root/.gdbinit
RUN echo "thread apply all where"               >> /root/.gdbinit
RUN echo "end"                                  >> /root/.gdbinit
RUN echo "document whereall"                    >> /root/.gdbinit
RUN echo "Alias for 'thread apply all where'"   >> /root/.gdbinit
RUN echo "end"                                  >> /root/.gdbinit
RUN echo "document wa"                          >> /root/.gdbinit
RUN echo "Alias for 'thread apply all where'"   >> /root/.gdbinit
RUN echo "end"                                  >> /root/.gdbinit
EOF
  docker build -t sikarwar:comdb2 .
  popd
  rm -rf $DIR
}

function run {
  n=$1
  put clusternum $1
  for((i=1;i<=$n;++i)); do
    name=$(container-name $i)
    docker run -it -d --privileged --network host --network comdb2 -v $HOME/bin:$HOME/bin -v $SRC:$SRC --name ${name} --hostname ${name} sikarwar:comdb2 /bin/cat
  done
}

function do_docker {
  declare -a names
  n=$(get clusternum)
  for ((i=1;i<=${n};++i)); do
    names+=($(container-name $i))
  done
  docker $1 ${names[@]}
}

function tmux {
  /usr/bin/tmux new-window
  /usr/bin/tmux send-keys "$HOME/bin/c 1" Enter
  n=$(get clusternum)
  n=$((n-1))
  for((i=2;i<=$n;++i)); do
    /usr/bin/tmux split-window
    /usr/bin/tmux send-keys "$HOME/bin/c ${i}" Enter
    /usr/bin/tmux select-layout tiled
  done
}

function akdb {
  tmux
  /usr/bin/tmux set-window-option synchronize-panes
  /usr/bin/tmux send-keys "cd /akdb" Enter
  /usr/bin/tmux send-keys "gdb -ex run -args comdb2 akdb" Enter
  /usr/bin/tmux set-option window-status-style "bg=colour124"
  /usr/bin/tmux set-option pane-active-border-style "fg=colour124"
}

if [[ "$1" == "build" ]]; then
  build
elif [[ "$1" == "run" ]]; then
  run $2
elif [[ "$1" == "rm" ]]; then
  do_docker rm
elif [[ "$1" == "stop" ]]; then
  do_docker stop
elif [[ "$1" == "kill" ]]; then
  do_docker kill
elif [[ "$1" == "start" ]]; then
  do_docker start
elif [[ "$1" == "tmux" ]]; then
  tmux
elif [[ "$1" == "akdb" ]]; then
  akdb
else
  echo >&2 "Usage: cluster <build|run|rm|stop|kill|start|tmux>"
  exit 1
fi
