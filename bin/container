#!/bin/bash

ROOT=$HOME/containers
SRC=$HOME/src/comdb2
USER=comdb2

function start {
    for name in ${NAME[@]}; do
        sudo systemd-nspawn                 \
            -q                              \
            --boot                          \
            --network-veth                  \
            --network-bridge=br0            \
            --bind=$SRC:/home/$USER/comdb2  \
            --tmpfs=/opt/bb:uid=1000        \
            --directory $ROOT/$name > /dev/null 2>&1 &
    done
}

function root {
    sudo machinectl -q shell $NAME
}

function list {
    echo "MACHINES ON DISK:"
    allnames=( $(find $ROOT -mindepth 1 -maxdepth 1 -type d -not -name 'template*') )
    for name in ${allnames[@]}; do
        [[ $name == $ROOT ]] && continue
        [[ $(basename $name) == "template" ]] && continue
        echo $name
    done
    echo -e "\nMACHINES RUNNING:"
    sudo machinectl --no-legend list
}

function stop {
    for name in ${NAME[@]}; do
        sudo machinectl -q poweroff $name
    done
}

function setup {
name=$1
HOST_PUBLIC_KEY=$(<$HOME/.ssh/id_rsa_thinkpad.pub)

read -d '' BASHRC <<'EOF'
PATH=/opt/bb/bin:\\\$PATH
alias installcomdb2=\\\"tar -C /opt/bb --strip-components=3 -x -f comdb2.tar.gz\\\"
alias vim=vi
EOF

read -d '' STRICT_CHECK <<'EOF'
Host \*
    StrictHostKeyChecking no
EOF

read -d '' INPUTRC <<'EOF'
set editing-mode vi

set keymap vi-command
Control-l: clear-screen

set keymap vi-insert
Control-l: clear-screen
EOF

read -d '' GDBINIT <<'EOF'
set print thread-events off
set height 0
set print pretty on
set confirm off

define whereall
thread apply all where
end

document whereall
Alias for \\\"thread apply all where\\\"
end
EOF

sudo systemd-run --pipe --machine=$name /bin/bash > /dev/null <<EOF
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
/usr/bin/systemctl enable systemd-networkd
/usr/bin/systemctl enable systemd-resolved
/usr/bin/systemctl enable sshd
/usr/bin/hostnamectl set-hostname $name
/usr/sbin/adduser $USER --create-home --user-group
/usr/bin/mkdir -p /opt/bb
/usr/bin/chown $USER:$USER /opt/bb
/usr/bin/su -c 'ssh-keygen -q -f /home/$USER/.ssh/id_rsa -N ""' $USER
/usr/bin/su -c 'echo "$HOST_PUBLIC_KEY" > /home/$USER/.ssh/authorized_keys' $USER
/usr/bin/su -c 'echo "$STRICT_CHECK" > /home/$USER/.ssh/config' $USER
/usr/bin/su -c 'echo "$BASHRC" >> /home/$USER/.bashrc' $USER
/usr/bin/su -c 'echo "export HOSTNAME=$name" >> /home/$USER/.bashrc' $USER
/usr/bin/su -c 'echo "$INPUTRC" >> /home/$USER/.inputrc' $USER
/usr/bin/su -c 'echo "$GDBINIT" >> /home/$USER/.gdbinit' $USER
EOF

sed -i "/${NAME},/d" $HOME/.ssh/known_hosts
}

function create {
    for name in ${NAME[@]}; do
        tmux split-window -p 50 -h          \
            sudo systemd-nspawn             \
            -q                              \
            --boot                          \
            --network-bridge=br0            \
            --template=$ROOT/template       \
            --directory $ROOT/$name
        tmux select-pane -t 0
        echo -n "Press a key to run setup"
        read
        setup $name
        sudo machinectl -q poweroff $name
        sleep 1
    done
}

function delete {
    for name in ${NAME[@]}; do
        sudo btrfs subvolume delete $ROOT/$name
    done
}

function bridge {
    if ! brctl show br0 > /dev/null 2>&1; then
        sudo brctl addbr br0
    fi
    if ! ip link show br0 | grep UP > /dev/null ; then
        sudo ip link set dev br0 up
    fi
}

function bootstrap_arch {
    sudo pacstrap -i -c $ROOT/template base gdb make openssh protobuf-c vim valgrind
}

function bootstrap_fedora {
    DNF_ARG=(-y --releasever=28 --nogpgcheck --disablerepo='*' --enablerepo=fedora --enablerepo=updates)
    if [ ! -f /etc/yum/repos.d/fedora.repo ]; then
        sudo mkdir -p /etc/yum/repos.d
        cat <<'EOF' | sudo tee /etc/yum/repos.d/fedora.repo > /dev/null
[fedora]
name=fedora
baseurl=http://archive.fedoraproject.org/pub/fedora/linux/releases/28/Everything/x86_64/os
enabled=1

[updates]
name=updates
baseurl=http://archive.fedoraproject.org/pub/fedora/linux/updates/28/Everything/x86_64
enabled=1
EOF
    #sudo dnf ${DNF_ARG[@]} update
    fi
    sudo dnf ${DNF_ARG[@]} \
        --installroot=$ROOT/template install systemd passwd dnf fedora-release vim-minimal openssh-server openssh-clients iputils iproute \
        gcc gcc-c++ make ninja-build cmake3 protobuf-c libunwind libunwind-devel protobuf-c-devel byacc flex openssl openssl-devel openssl-libs readline-devel sqlite sqlite-devel libuuid libuuid-devel zlib-devel zlib lz4-devel gawk tcl lz4 rpm-build which nc
}

function bootstrap {
    bootstrap_fedora
}

function make_trust {
    ssh $1 cat .ssh/id_rsa.pub | ssh $2 tee --append .ssh/authorized_keys > /dev/null
}

function trust {
    if [[ -z $all ]]; then
        M=${NAME[0]}
        NAME=(${NAME[@]/$M})
        for name in ${NAME[@]}; do
            #[[ $M == $name ]] && continue
            make_trust $M $name
        done
    else
        for M in ${NAME[@]}; do
            for name in ${NAME[@]}; do
                make_trust $M $name
            done
        done
    fi
}

function getip {
    ip=$(ssh $1 /sbin/ip addr | grep 'inet 169' | awk '{print $2}' | sed 's/\/.*$//')
}

function ipaddr {
    for M in ${NAME[@]}; do
        for N in ${NAME[@]}; do
            [[ $M == $N ]] && continue
            getip $N
            sudo machinectl -q shell $M /usr/bin/sh -c "/bin/echo $ip $N >> /etc/hosts" > /dev/null
        done
    done
}

function cmd {
    for M in ${NAME[@]}; do
        ssh $M "$@"
    done
}

[[ "$1" == "--all" ]] && all=1 && shift
CMD=$1 && shift
[[ "$1" == "--all" ]] && all=1 && shift

if [[ -z $all ]]; then
    NAME=( $* )
else
    NAME=()
    allnames=( $(find $ROOT -mindepth 1 -maxdepth 1 -type d -not -name 'template*') )
    for name in ${allnames[@]}; do
        NAME+=($(basename $name))
    done
fi

function usage {
cat <<EOF
Usage: container [OPTION] COMMAND [NAME..]

OPTION:
  --all         start/stop/delete/trust all containers at:'$ROOT'
  --help        Display this help and exit

COMMAND:
  bootstrap     Setup template dir with pacstrap
  create <name> Create container in btrfs subvolume
  delete <name> Delete container and btrfs subvolume
  list          List running containers
  root <name>   Get root shell in named container
  start <name>  Start named container
  stop <name>   Stop named container
  trust <name> <other..>    Add name to others' authorized_keys
EOF
[[ $CMD == "help" ]] && exit 0
exit 1
}

case $CMD in
    bootstrap) bootstrap ; exit ;;
    create) bridge ; create ; exit ;;
    delete) delete ; exit ;;
    list) list ; exit ;;
    root) root ; exit ;;
    start) bridge ; start ; exit ;;
    stop) stop ; exit ;;
    trust) trust ; exit ;;
    ipaddr) ipaddr; exit;;
    cmd) cmd $@; exit;;
    --help) usage ; exit ;;
    *) echo -e "container: invalid option -- '$CMD'\nTry 'container --help' for more information." >&2
esac
